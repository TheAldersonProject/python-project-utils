# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# A Tera template to be rendered as the changelog's header.
# See https://keats.github.io/tera/docs/#introduction
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
"""
# A Tera template to be rendered for each release in the changelog.
# See https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}
## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
## [Unreleased]
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
            - {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
    {% endfor %}

{% endfor %}
"""
# A Tera template to be rendered as the changelog's footer.
# See https://keats.github.io/tera/docs/#introduction
footer = """
{% for release in releases -%}
    {% if release.version -%}
    {% if release.previous.version -%}
        [{{ release.version | trim_start_matches(pat="v") }}]: https://github.com/thgdiaz/python-project-utils/compare/{{ release.previous.version }}..{{ release.version }}
    {% endif -%}
    {% else -%}
        [Unreleased]: https://github.com/thgdiaz/python-project-utils/compare/{{ releases | first | get(key="version") }}..HEAD
    {% endif -%}
{% endfor %}
<!-- End of CHANGELOG.md file. -->
"""
# Remove leading and trailing whitespaces from the changelog's body.
trim = true

[git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = false
# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^feature", group = "Features" },
    { message = "^add", group = "Features", case_sensitive = false },
    { message = "^support", group = "Features", case_sensitive = false },
    { message = "^.*: add", group = "Features" },
    { message = "^.*: support", group = "Features" },
    
    { message = "^fix", group = "Bug Fixes" },
    { message = "^bug", group = "Bug Fixes" },
    { message = "^test", group = "Bug Fixes" },
    { message = "^.*: fix", group = "Bug Fixes" },
    
    { message = "^perf", group = "Performance" },
    { message = "^performance", group = "Performance" },
    { message = "^.*: perf", group = "Performance" },
    
    { message = "^refactor", group = "Refactor" },
    { message = "^.*: refactor", group = "Refactor" },
    
    { message = "^remove", group = "Removed", case_sensitive = false },
    { message = "^.*: remove", group = "Removed" },
    { message = "^.*: delete", group = "Removed" },
    
    { message = "^docs", group = "Documentation" },
    { message = "^.*: docs", group = "Documentation" },
    
    { message = "^style", group = "Styling" },
    { message = "^.*: style", group = "Styling" },
    
    { message = "^test", group = "Testing" },
    { message = "^.*: test", group = "Testing" },
    
    { message = "^chore", group = "Chore" },
    { message = "^.*: chore", group = "Chore" },
    
    { message = "^build", group = "Build" },
    { message = "^.*: build", group = "Build" },
    
    { message = "^ci", group = "CI" },
    { message = "^.*: ci", group = "CI" },
    
    { message = "^.*", group = "Other Changes" },
]
# Prevent commits that are breaking from being excluded by commit parsers.
filter_commits = false
# Order releases topologically instead of chronologically.
topo_order = false
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "oldest"

# Link pattern to use for generating links to commits
link_parsers = [
    { pattern = "#(\\d+)", href = "https://github.com/thgdiaz/python-project-utils/issues/$1" }
]

[bump]
features_always_bump_minor = true
breaking_always_bump_major = true
initial_tag = "0.1.0"
